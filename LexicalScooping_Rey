#Week3
#makeCacheMatrix: This function creates a special "matrix" object that can cache its inverse 
# makeCacheMatrix creates a list containing a function to

makeCacheMatrix <- function(x = matrix()) {
         inv <- NULL
         set <- function(y) {                                                            #set a value of the matrix
                 x <<- y
                 inv <<- NULL
         }
         get <- function() x                                                             #get a value of the matrix
         setInverse <- function(inverse) inv <<- inverse                                 #set inverse of the matrix
         getInverse <- function() inv                                                    #get inverse of the matrix
         list(set = set, get = get, setInverse = setInverse, getInverse = getInverse)
 }

#cacheSolve: This function computes the inverse of the special "matrix" returned by makeCacheMatrix 
# the inverse has already been computed.So, it gets the result and skips the computation
# If not, it calculate the inverse, sets the value in the cache via setinverse function
#and finally cacheSolve should give back the inverse from the beginng

cacheSolve <- function(x, ...) {
         # Return a matrix that is the inverse of 'x'
         inv <- x$getInverse()
         if (!is.null(inv)) {
                 message("getting cached data")
                 return(inv)
         }
         mat <- x$get()
         inv <- solve(mat, ...)
         x$setInverse(inv)
         inv
}

###Example###
ejemplo<-matrix(rnorm(9),3,3)
ejemplo
##         [,1]       [,2]      [,3]
#[1,] -1.825912 -0.6555551 0.1259002
#[2,]  0.172040  0.9704417 0.2834930
#[3,]  1.484553 -1.8311813 0.1522124
ej<-cacheSolve(ejemplo)
##         [,1]       [,2]       [,3]
#[1,] -0.3928677 0.07703853  0.1814718
#[2,] -0.2325212 0.27385488 -0.3177235
#[3,]  1.0343722 2.54322395  0.9774906
